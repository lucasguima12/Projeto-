#define _GNU_SOURCE
#include <stdlib.h>
#include <malloc.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>
#include <sched.h>
#include <stdio.h>
// 64kB stack
#define FIBER_STACK 1024*64

struct c {
        int saldo;
};
typedef struct c conta;

conta from, to;
int valor;

// The child thread will execute this function
int transferencia( void *arg)
{
        if (from.saldo >= valor){ // 2
                from.saldo -= valor;
                to.saldo += valor;
                printf("Transferencia concluida com sucesso!\n");
        }
        printf("Saldo de c1: %d\n", from.saldo);
        printf("Saldo de c2: %d\n", to.saldo);
        return 0;
}
int transferencia2( void *arg)
{
        if (to.saldo >= valor){ // 2
                to.saldo -= valor;
                from.saldo += valor;
                printf("Transferencia concluida com sucesso!\n");
        }
        printf("Saldo de c1: %d\n", from.saldo);
        printf("Saldo de c2: %d\n", to.saldo);
        return 0;
}

int main()
{
        void* stack;
        pid_t pid;
        int i;
        // Allocate the stack
        stack = malloc( FIBER_STACK );
        if ( stack == 0 )
        {
                perror("malloc: could not allocate stack");
                exit(1);
        }
        // Todas as contas começam com saldo 100
        from.saldo = 100;
        to.saldo = 100;

        printf( "Transferindo 10 para a conta c2\n" );
        valor = 10;
      
        for (i = 0; i < 50; i++) {
                 //Call the clone system call to create the child thread
                 pid = clone(&transferencia, (char*) stack + FIBER_STACK, SIGCHLD | CLONE_FS | CLONE_FILES | CLONE_SIGHAND | CLONE_VM | CLONE_VFORK, 0);
                 if ( pid == -1)
                 {
                         perror("clone");
                         exit(2);
                 }
                 
                 if ( from.saldo < valor)
                 {
                         printf("Conta c1 sem saldo!\n");
                 }
		}
	for (i = 0; i < 50; i++) {
                 //Call the clone system call to create the child thread
                 pid = clone(&transferencia2, (char*) stack + FIBER_STACK, SIGCHLD | CLONE_FS | CLONE_FILES | CLONE_SIGHAND | CLONE_VM | CLONE_VFORK, 0);
                 if ( pid == -1)
                 {
                         perror("clone");
                         exit(2);
                 }

                 if ( from.saldo < valor)
                 {
                         printf("Conta c1 sem saldo!\n");
                 }
		if (to.saldo < valor)
		{
			printf("Conta c2 sem saldo!\n");
		}
	}

        // Free the stack
        free(stack);
        printf("Transferencias concluidas e memoria liberada.\n");
        printf("Conta 1 com: %d\n", from.saldo);
        printf("Conta 2 com: %d\n", to.saldo);
        return 0;
}



// COMENTARIOS: Bom, utilizei na função "clone", um argumento chamado "CLONE_VFORK", que faz com que a execução do processo pai seja suspensa
ate que a thread filha libere seus recursos de memoria virtual. Ja que as threds filhas utilizam o mesmo espaço de memoria do processo pai devido ao argumento "CLONE_VM", que cria uma "regia critica".
Com o "CLONE_VFORK" eu utilizo a tecnica da "exclusao mutua", ja que uma thread tera que esperar a outra terminar para utilizar o mesmo recurso de memoria, ocasionando uma "região critica
com exclusao mutua", fazendo com que o problema de concorrencia acabe.

Utilizei este artigo em ingles para enteder o comando "clone()" e os argumentos "CLONE_VFORK", "CLONE_VM", etc:

Copyright (c) 1992 Drew Eckhardt <drew@cs.colorado.edu>, March 28, 1992
and Copyright (c) Michael Kerrisk, 2001, 2002, 2005, 2013. Disponivel em: http://man7.org/linux/man-pages/man2/clone.2.html
Acesso em: 04/11/2019



Acesso em http://man7.org/linux/man-pages/man2/clone.2.html

E tambem estes artigos:

BERNAL, Volnys. Exclusão Mútua. edisiplinausp, 2004-2017. Disponível em: https://edisciplinas.usp.br/pluginfile.php/3061851/mod_resource/content/2/36-Mutex-v27.pdf
Acesso em: 04/11/2019

UEYAMA, Jó. Sistema Operacionais. Disponivel em: http://wiki.icmc.usp.br/images/7/76/Aula06.pdf
Acesso em: 04/11/2019










        
        
        
        
        
        
        
        
        
        
        
        
